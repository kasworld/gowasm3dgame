// Code generated by "genprotocol -ver=56f7fdcb1d3890519b70a4ebb8c1f4f8c38a8b3f846e651266e96ce857513f5c -basedir=. -prefix=w3d -statstype=int"

package w3d_authorize

import (
	"bytes"
	"fmt"

	"github.com/kasworld/gowasm3dgame/protocol_w3d/w3d_idcmd"
)

type AuthorizedCmds [w3d_idcmd.CommandID_Count]bool

func (acidl *AuthorizedCmds) String() string {
	var buff bytes.Buffer
	fmt.Fprintf(&buff, "AuthorizedCmds[")
	for i, v := range acidl {
		if v {
			fmt.Fprintf(&buff, "%v ", w3d_idcmd.CommandID(i))
		}
	}
	fmt.Fprintf(&buff, "]")
	return buff.String()
}

func NewAllSet() *AuthorizedCmds {
	rtn := new(AuthorizedCmds)
	for i := 0; i < w3d_idcmd.CommandID_Count; i++ {
		rtn[i] = true
	}
	return rtn
}

func NewByCmdIDList(cmdlist []w3d_idcmd.CommandID) *AuthorizedCmds {
	rtn := new(AuthorizedCmds)
	for _, id := range cmdlist {
		rtn[id] = true
	}
	return rtn
}

func (acidl *AuthorizedCmds) Union(src *AuthorizedCmds) *AuthorizedCmds {
	for cmdid, auth := range src {
		if auth {
			acidl[cmdid] = true
		}
	}
	return acidl
}

func (acidl *AuthorizedCmds) SubIntersection(src *AuthorizedCmds) *AuthorizedCmds {
	for cmdid, auth := range src {
		if auth {
			acidl[cmdid] = false
		}
	}
	return acidl
}

func (acidl *AuthorizedCmds) Duplicate() *AuthorizedCmds {
	rtn := *acidl
	return &rtn
}

func (acidl *AuthorizedCmds) CheckAuth(cmdid w3d_idcmd.CommandID) bool {
	return acidl[cmdid]
}
