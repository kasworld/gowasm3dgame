// Code generated by "genprotocol -ver=ed65a653bd268dc21902d5d07939f7bfc1ba6b98026a426c30526d9f59ba8d12 -basedir=. -prefix=w2d -statstype=int"

package w2d_looptcp

import (
	"context"
	"net"
	"time"

	"github.com/kasworld/gowasm2dgame/protocol_w2d/w2d_const"
	"github.com/kasworld/gowasm2dgame/protocol_w2d/w2d_packet"
)

var bufPool = w2d_packet.NewPool(w2d_const.PacketBufferPoolSize)

func SendPacket(conn *net.TCPConn, buf []byte) error {
	toWrite := len(buf)
	for l := 0; l < toWrite; {
		n, err := conn.Write(buf[l:toWrite])
		if err != nil {
			return err
		}
		l += n
	}
	return nil
}

func SendLoop(sendRecvCtx context.Context, SendRecvStop func(), tcpConn *net.TCPConn,
	timeOut time.Duration,
	SendCh chan w2d_packet.Packet,
	marshalBodyFn func(interface{}, []byte) ([]byte, byte, error),
	handleSentPacketFn func(header w2d_packet.Header) error,
) error {

	defer SendRecvStop()
	var err error
loop:
	for {
		select {
		case <-sendRecvCtx.Done():
			break loop
		case pk := <-SendCh:
			if err = tcpConn.SetWriteDeadline(time.Now().Add(timeOut)); err != nil {
				break loop
			}
			oldbuf := bufPool.Get()
			sendBuffer, err := w2d_packet.Packet2Bytes(&pk, marshalBodyFn, oldbuf)
			if err != nil {
				bufPool.Put(oldbuf)
				break loop
			}
			if err = SendPacket(tcpConn, sendBuffer); err != nil {
				bufPool.Put(oldbuf)
				break loop
			}
			if err = handleSentPacketFn(pk.Header); err != nil {
				bufPool.Put(oldbuf)
				break loop
			}
			bufPool.Put(oldbuf)
		}
	}
	return err
}

func RecvLoop(sendRecvCtx context.Context, SendRecvStop func(), tcpConn *net.TCPConn,
	timeOut time.Duration,
	HandleRecvPacketFn func(header w2d_packet.Header, body []byte) error,
) error {

	defer SendRecvStop()

	pb := w2d_packet.NewRecvPacketBuffer()
	var err error
loop:
	for {
		select {
		case <-sendRecvCtx.Done():
			return nil

		default:
			if pb.IsPacketComplete() {
				header, rbody, lerr := pb.GetHeaderBody()
				if lerr != nil {
					err = lerr
					break loop
				}
				if err = HandleRecvPacketFn(header, rbody); err != nil {
					break loop
				}
				pb = w2d_packet.NewRecvPacketBuffer()
				if err = tcpConn.SetReadDeadline(time.Now().Add(timeOut)); err != nil {
					break loop
				}
			} else {
				err := pb.Read(tcpConn)
				if err != nil {
					return err
				}
			}
		}
	}
	return err
}
